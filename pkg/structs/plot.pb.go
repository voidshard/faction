// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: plot.proto

package structs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Plot is some package of land, buildings and attachments that a faction
// can buy, sell or use as a place of work / trade / whatever.
//
// Plots may yield some resource (eg. a Commodity) or simply be a plot of
// land / building(s) that can be used for some purpose.
//
// It might be a farm + land, a castle complete with moat, a high rise building,
// a small sea-side house + jetty .. for the purposes of the simulation all that
// matters is that it can be used as a place of work, for whatever work means
// for that faction.
type Plot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AreaID    string `protobuf:"bytes,2,opt,name=AreaID,proto3" json:"AreaID,omitempty"`
	FactionID string `protobuf:"bytes,3,opt,name=FactionID,proto3" json:"FactionID,omitempty"`
	// secrecy value if it isn't widely known who owns this plot
	Hidden int64 `protobuf:"varint,4,opt,name=Hidden,proto3" json:"Hidden,omitempty"`
	// average value for this plot (to the owner)
	// - size * land value + commodity value * yield
	// Nb. rough estimation at last write given current market values
	Value float64 `protobuf:"fixed64,5,opt,name=Value,proto3" json:"Value,omitempty"`
	Crop  *Crop   `protobuf:"bytes,6,opt,name=Crop,proto3" json:"Crop,omitempty"`
}

func (x *Plot) Reset() {
	*x = Plot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plot) ProtoMessage() {}

func (x *Plot) ProtoReflect() protoreflect.Message {
	mi := &file_plot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plot.ProtoReflect.Descriptor instead.
func (*Plot) Descriptor() ([]byte, []int) {
	return file_plot_proto_rawDescGZIP(), []int{0}
}

func (x *Plot) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Plot) GetAreaID() string {
	if x != nil {
		return x.AreaID
	}
	return ""
}

func (x *Plot) GetFactionID() string {
	if x != nil {
		return x.FactionID
	}
	return ""
}

func (x *Plot) GetHidden() int64 {
	if x != nil {
		return x.Hidden
	}
	return 0
}

func (x *Plot) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Plot) GetCrop() *Crop {
	if x != nil {
		return x.Crop
	}
	return nil
}

// Crop holds extra data about the land & it's usage
type Crop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Commodity that can be harvested from this land (if any)
	Commodity string `protobuf:"bytes,1,opt,name=Commodity,proto3" json:"Commodity,omitempty"`
	// Size in land units squared
	Size int64 `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	// Yield of the resource, ie how many "units" of `resource` are produced
	// (or expected to be produced) from this per unit squared of land.
	//
	// This is an average, the actual value is dictated by the Economy interface
	// for the given tick(s) when needed.
	//
	// (If Commodity is set, otherwise this is 0).
	//
	// Nb. this land could be a small but super productive area, or a
	// massive expanse. It doesn't really matter .. all we mean here is that
	// this land is productive for a given purpose, and can be owned & run
	// by a faction.
	Yield int64 `protobuf:"varint,3,opt,name=Yield,proto3" json:"Yield,omitempty"`
}

func (x *Crop) Reset() {
	*x = Crop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crop) ProtoMessage() {}

func (x *Crop) ProtoReflect() protoreflect.Message {
	mi := &file_plot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crop.ProtoReflect.Descriptor instead.
func (*Crop) Descriptor() ([]byte, []int) {
	return file_plot_proto_rawDescGZIP(), []int{1}
}

func (x *Crop) GetCommodity() string {
	if x != nil {
		return x.Commodity
	}
	return ""
}

func (x *Crop) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Crop) GetYield() int64 {
	if x != nil {
		return x.Yield
	}
	return 0
}

// LandSummary gives metrics of some areas of land (plots, commodities, etc)
type LandSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commodity -> crop
	Commodities map[string]*Crop `protobuf:"bytes,1,rep,name=Commodities,proto3" json:"Commodities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// area -> LandSummary
	Areas     map[string]*LandSummary `protobuf:"bytes,2,rep,name=Areas,proto3" json:"Areas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalSize int64                   `protobuf:"varint,3,opt,name=TotalSize,proto3" json:"TotalSize,omitempty"`
	Count     int64                   `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *LandSummary) Reset() {
	*x = LandSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LandSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandSummary) ProtoMessage() {}

func (x *LandSummary) ProtoReflect() protoreflect.Message {
	mi := &file_plot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandSummary.ProtoReflect.Descriptor instead.
func (*LandSummary) Descriptor() ([]byte, []int) {
	return file_plot_proto_rawDescGZIP(), []int{2}
}

func (x *LandSummary) GetCommodities() map[string]*Crop {
	if x != nil {
		return x.Commodities
	}
	return nil
}

func (x *LandSummary) GetAreas() map[string]*LandSummary {
	if x != nil {
		return x.Areas
	}
	return nil
}

func (x *LandSummary) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *LandSummary) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_plot_proto protoreflect.FileDescriptor

var file_plot_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a,
	0x04, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x43, 0x72, 0x6f,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x52, 0x04,
	0x43, 0x72, 0x6f, 0x70, 0x22, 0x4e, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x59,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0xc0, 0x02, 0x0a, 0x0b, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4c, 0x61, 0x6e, 0x64,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x41, 0x72, 0x65, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x41,
	0x72, 0x65, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x45, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x43, 0x72, 0x6f, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x46, 0x0a, 0x0a, 0x41, 0x72, 0x65, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x70, 0x6b, 0x67, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plot_proto_rawDescOnce sync.Once
	file_plot_proto_rawDescData = file_plot_proto_rawDesc
)

func file_plot_proto_rawDescGZIP() []byte {
	file_plot_proto_rawDescOnce.Do(func() {
		file_plot_proto_rawDescData = protoimpl.X.CompressGZIP(file_plot_proto_rawDescData)
	})
	return file_plot_proto_rawDescData
}

var file_plot_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_plot_proto_goTypes = []interface{}{
	(*Plot)(nil),        // 0: Plot
	(*Crop)(nil),        // 1: Crop
	(*LandSummary)(nil), // 2: LandSummary
	nil,                 // 3: LandSummary.CommoditiesEntry
	nil,                 // 4: LandSummary.AreasEntry
}
var file_plot_proto_depIdxs = []int32{
	1, // 0: Plot.Crop:type_name -> Crop
	3, // 1: LandSummary.Commodities:type_name -> LandSummary.CommoditiesEntry
	4, // 2: LandSummary.Areas:type_name -> LandSummary.AreasEntry
	1, // 3: LandSummary.CommoditiesEntry.value:type_name -> Crop
	2, // 4: LandSummary.AreasEntry.value:type_name -> LandSummary
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_plot_proto_init() }
func file_plot_proto_init() {
	if File_plot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LandSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plot_proto_goTypes,
		DependencyIndexes: file_plot_proto_depIdxs,
		MessageInfos:      file_plot_proto_msgTypes,
	}.Build()
	File_plot_proto = out.File
	file_plot_proto_rawDesc = nil
	file_plot_proto_goTypes = nil
	file_plot_proto_depIdxs = nil
}
