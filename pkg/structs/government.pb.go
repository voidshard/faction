// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: government.proto

package structs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Government for our purposes is a set of laws, rights, obligations
// and similar.
//
// This doesn't represent an actual faction, merely the laws / edicts.
// To represent the ruling faction that makes up the Government we use
// a Faction (*gasp* .. I know right).
//
// The ruling faction can add / remove rules from this and all factions
// under it are expected to follow the rules.
//
// Ahem. At least, in theory.
//
// Most factions under a government qualify as Tributaries (they're
// allowed to act on their own, but pay tax to their overlord).
// (See relations.go).
//
// = vassals =
// Note that a Government may have a subordinate faction that is also a
// Government. ie Kingdom of Morovia (Government) run by the Morovian Royal
// Family (Faction) might have a vassal, Kingdom of Duria (Government) run
// by the Durian Royal Family (Faction).
// - Factions under Morovia (but not Duria) obey the laws of Morovia.
// - Factions under Duria obey the laws of Duria.
type Government struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Every `TaxFrequency` tick(s) the governing faction will collect
	// funds from law abiding factions under it.
	// Covert factions do not pay tax .. since that would require them to exist
	// openly.
	//
	// Higher tax rates make factions increasingly unhappy. Obviously.
	TaxRate      float64 `protobuf:"fixed64,2,opt,name=TaxRate,proto3" json:"TaxRate,omitempty"`
	TaxFrequency int64   `protobuf:"varint,3,opt,name=TaxFrequency,proto3" json:"TaxFrequency,omitempty"`
	// Outlawed is a set of laws marking factions, actions, commodities as
	// illegal (or not).
	Outlawed *Laws `protobuf:"bytes,4,opt,name=Outlawed,proto3" json:"Outlawed,omitempty"`
}

func (x *Government) Reset() {
	*x = Government{}
	if protoimpl.UnsafeEnabled {
		mi := &file_government_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Government) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Government) ProtoMessage() {}

func (x *Government) ProtoReflect() protoreflect.Message {
	mi := &file_government_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Government.ProtoReflect.Descriptor instead.
func (*Government) Descriptor() ([]byte, []int) {
	return file_government_proto_rawDescGZIP(), []int{0}
}

func (x *Government) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Government) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *Government) GetTaxFrequency() int64 {
	if x != nil {
		return x.TaxFrequency
	}
	return 0
}

func (x *Government) GetOutlawed() *Laws {
	if x != nil {
		return x.Outlawed
	}
	return nil
}

type Laws struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IllegalFactions are factions that are illegal to be a part of.
	// Any jobs from these factions are illegal, even if the action is otherwise legal,
	// if within the jurisdiction of the government.
	Factions map[string]bool `protobuf:"bytes,1,rep,name=Factions,proto3" json:"Factions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// IllegalActions are actions that are illegal to perform. Any job with such an action
	// is illegal, if within the jurisdiction of the government.
	Actions map[string]bool `protobuf:"bytes,2,rep,name=Actions,proto3" json:"Actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// IllegalCommodities are commodities that are illegal to trade, harvest or produce
	// if within the jurisdiction of the government.
	Commodities map[string]bool `protobuf:"bytes,3,rep,name=Commodities,proto3" json:"Commodities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// IllegalResearch is research that is illegal to perform.
	Research map[string]bool `protobuf:"bytes,4,rep,name=Research,proto3" json:"Research,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Religions that are outright banned (heretical, generally considered harmful or maybe
	// the ruler(s) are just .. bigots?).
	Religions map[string]bool `protobuf:"bytes,5,rep,name=Religions,proto3" json:"Religions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Laws) Reset() {
	*x = Laws{}
	if protoimpl.UnsafeEnabled {
		mi := &file_government_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Laws) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Laws) ProtoMessage() {}

func (x *Laws) ProtoReflect() protoreflect.Message {
	mi := &file_government_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Laws.ProtoReflect.Descriptor instead.
func (*Laws) Descriptor() ([]byte, []int) {
	return file_government_proto_rawDescGZIP(), []int{1}
}

func (x *Laws) GetFactions() map[string]bool {
	if x != nil {
		return x.Factions
	}
	return nil
}

func (x *Laws) GetActions() map[string]bool {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Laws) GetCommodities() map[string]bool {
	if x != nil {
		return x.Commodities
	}
	return nil
}

func (x *Laws) GetResearch() map[string]bool {
	if x != nil {
		return x.Research
	}
	return nil
}

func (x *Laws) GetReligions() map[string]bool {
	if x != nil {
		return x.Religions
	}
	return nil
}

var File_government_proto protoreflect.FileDescriptor

var file_government_proto_rawDesc = []byte{
	0x0a, 0x10, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x0a, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61,
	0x78, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x54, 0x61, 0x78, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21,
	0x0a, 0x08, 0x4f, 0x75, 0x74, 0x6c, 0x61, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x4c, 0x61, 0x77, 0x73, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x6c, 0x61, 0x77, 0x65,
	0x64, 0x22, 0xb8, 0x04, 0x0a, 0x04, 0x4c, 0x61, 0x77, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x46, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4c,
	0x61, 0x77, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4c,
	0x61, 0x77, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x4c, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4c, 0x61, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4c, 0x61, 0x77, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x52,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c,
	0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x5a, 0x0b,
	0x70, 0x6b, 0x67, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_government_proto_rawDescOnce sync.Once
	file_government_proto_rawDescData = file_government_proto_rawDesc
)

func file_government_proto_rawDescGZIP() []byte {
	file_government_proto_rawDescOnce.Do(func() {
		file_government_proto_rawDescData = protoimpl.X.CompressGZIP(file_government_proto_rawDescData)
	})
	return file_government_proto_rawDescData
}

var file_government_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_government_proto_goTypes = []interface{}{
	(*Government)(nil), // 0: Government
	(*Laws)(nil),       // 1: Laws
	nil,                // 2: Laws.FactionsEntry
	nil,                // 3: Laws.ActionsEntry
	nil,                // 4: Laws.CommoditiesEntry
	nil,                // 5: Laws.ResearchEntry
	nil,                // 6: Laws.ReligionsEntry
}
var file_government_proto_depIdxs = []int32{
	1, // 0: Government.Outlawed:type_name -> Laws
	2, // 1: Laws.Factions:type_name -> Laws.FactionsEntry
	3, // 2: Laws.Actions:type_name -> Laws.ActionsEntry
	4, // 3: Laws.Commodities:type_name -> Laws.CommoditiesEntry
	5, // 4: Laws.Research:type_name -> Laws.ResearchEntry
	6, // 5: Laws.Religions:type_name -> Laws.ReligionsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_government_proto_init() }
func file_government_proto_init() {
	if File_government_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_government_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Government); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_government_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Laws); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_government_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_government_proto_goTypes,
		DependencyIndexes: file_government_proto_depIdxs,
		MessageInfos:      file_government_proto_msgTypes,
	}.Build()
	File_government_proto = out.File
	file_government_proto_rawDesc = nil
	file_government_proto_goTypes = nil
	file_government_proto_depIdxs = nil
}
