// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: api.proto

package structs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	API_Worlds_FullMethodName        = "/API/Worlds"
	API_SetWorld_FullMethodName      = "/API/SetWorld"
	API_ListWorlds_FullMethodName    = "/API/ListWorlds"
	API_DeleteWorld_FullMethodName   = "/API/DeleteWorld"
	API_Actors_FullMethodName        = "/API/Actors"
	API_SetActors_FullMethodName     = "/API/SetActors"
	API_ListActors_FullMethodName    = "/API/ListActors"
	API_DeleteActor_FullMethodName   = "/API/DeleteActor"
	API_Factions_FullMethodName      = "/API/Factions"
	API_SetFactions_FullMethodName   = "/API/SetFactions"
	API_ListFactions_FullMethodName  = "/API/ListFactions"
	API_DeleteFaction_FullMethodName = "/API/DeleteFaction"
	API_OnChange_FullMethodName      = "/API/OnChange"
	API_AckStream_FullMethodName     = "/API/AckStream"
	API_DeferChange_FullMethodName   = "/API/DeferChange"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	Worlds(ctx context.Context, in *GetWorldsRequest, opts ...grpc.CallOption) (*GetWorldsResponse, error)
	SetWorld(ctx context.Context, in *SetWorldRequest, opts ...grpc.CallOption) (*SetWorldResponse, error)
	ListWorlds(ctx context.Context, in *ListWorldsRequest, opts ...grpc.CallOption) (*ListWorldsResponse, error)
	DeleteWorld(ctx context.Context, in *DeleteWorldRequest, opts ...grpc.CallOption) (*DeleteWorldResponse, error)
	Actors(ctx context.Context, in *GetActorsRequest, opts ...grpc.CallOption) (*GetActorsResponse, error)
	SetActors(ctx context.Context, in *SetActorsRequest, opts ...grpc.CallOption) (*SetActorsResponse, error)
	ListActors(ctx context.Context, in *ListActorsRequest, opts ...grpc.CallOption) (*ListActorsResponse, error)
	DeleteActor(ctx context.Context, in *DeleteActorRequest, opts ...grpc.CallOption) (*DeleteActorResponse, error)
	// rpc Races(GetRacesRequest) returns (GetRacesResponse);
	// rpc SetRace(SetRaceRequest) returns (SetRaceResponse);
	//
	// rpc Cultures(GetCulturesRequest) returns (GetCulturesResponse);
	// rpc SetCulture(SetCultureRequest) returns (SetCultureResponse);
	Factions(ctx context.Context, in *GetFactionsRequest, opts ...grpc.CallOption) (*GetFactionsResponse, error)
	SetFactions(ctx context.Context, in *SetFactionsRequest, opts ...grpc.CallOption) (*SetFactionsResponse, error)
	ListFactions(ctx context.Context, in *ListFactionsRequest, opts ...grpc.CallOption) (*ListFactionsResponse, error)
	DeleteFaction(ctx context.Context, in *DeleteFactionRequest, opts ...grpc.CallOption) (*DeleteFactionResponse, error)
	OnChange(ctx context.Context, in *OnChangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OnChangeResponse], error)
	AckStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AckRequest, AckResponse], error)
	DeferChange(ctx context.Context, in *DeferChangeRequest, opts ...grpc.CallOption) (*DeferChangeResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Worlds(ctx context.Context, in *GetWorldsRequest, opts ...grpc.CallOption) (*GetWorldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorldsResponse)
	err := c.cc.Invoke(ctx, API_Worlds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetWorld(ctx context.Context, in *SetWorldRequest, opts ...grpc.CallOption) (*SetWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetWorldResponse)
	err := c.cc.Invoke(ctx, API_SetWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListWorlds(ctx context.Context, in *ListWorldsRequest, opts ...grpc.CallOption) (*ListWorldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorldsResponse)
	err := c.cc.Invoke(ctx, API_ListWorlds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteWorld(ctx context.Context, in *DeleteWorldRequest, opts ...grpc.CallOption) (*DeleteWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWorldResponse)
	err := c.cc.Invoke(ctx, API_DeleteWorld_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Actors(ctx context.Context, in *GetActorsRequest, opts ...grpc.CallOption) (*GetActorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActorsResponse)
	err := c.cc.Invoke(ctx, API_Actors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetActors(ctx context.Context, in *SetActorsRequest, opts ...grpc.CallOption) (*SetActorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetActorsResponse)
	err := c.cc.Invoke(ctx, API_SetActors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListActors(ctx context.Context, in *ListActorsRequest, opts ...grpc.CallOption) (*ListActorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActorsResponse)
	err := c.cc.Invoke(ctx, API_ListActors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteActor(ctx context.Context, in *DeleteActorRequest, opts ...grpc.CallOption) (*DeleteActorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteActorResponse)
	err := c.cc.Invoke(ctx, API_DeleteActor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Factions(ctx context.Context, in *GetFactionsRequest, opts ...grpc.CallOption) (*GetFactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFactionsResponse)
	err := c.cc.Invoke(ctx, API_Factions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetFactions(ctx context.Context, in *SetFactionsRequest, opts ...grpc.CallOption) (*SetFactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFactionsResponse)
	err := c.cc.Invoke(ctx, API_SetFactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListFactions(ctx context.Context, in *ListFactionsRequest, opts ...grpc.CallOption) (*ListFactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFactionsResponse)
	err := c.cc.Invoke(ctx, API_ListFactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteFaction(ctx context.Context, in *DeleteFactionRequest, opts ...grpc.CallOption) (*DeleteFactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFactionResponse)
	err := c.cc.Invoke(ctx, API_DeleteFaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) OnChange(ctx context.Context, in *OnChangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OnChangeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], API_OnChange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OnChangeRequest, OnChangeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_OnChangeClient = grpc.ServerStreamingClient[OnChangeResponse]

func (c *aPIClient) AckStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AckRequest, AckResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], API_AckStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AckRequest, AckResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_AckStreamClient = grpc.ClientStreamingClient[AckRequest, AckResponse]

func (c *aPIClient) DeferChange(ctx context.Context, in *DeferChangeRequest, opts ...grpc.CallOption) (*DeferChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeferChangeResponse)
	err := c.cc.Invoke(ctx, API_DeferChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility.
type APIServer interface {
	Worlds(context.Context, *GetWorldsRequest) (*GetWorldsResponse, error)
	SetWorld(context.Context, *SetWorldRequest) (*SetWorldResponse, error)
	ListWorlds(context.Context, *ListWorldsRequest) (*ListWorldsResponse, error)
	DeleteWorld(context.Context, *DeleteWorldRequest) (*DeleteWorldResponse, error)
	Actors(context.Context, *GetActorsRequest) (*GetActorsResponse, error)
	SetActors(context.Context, *SetActorsRequest) (*SetActorsResponse, error)
	ListActors(context.Context, *ListActorsRequest) (*ListActorsResponse, error)
	DeleteActor(context.Context, *DeleteActorRequest) (*DeleteActorResponse, error)
	// rpc Races(GetRacesRequest) returns (GetRacesResponse);
	// rpc SetRace(SetRaceRequest) returns (SetRaceResponse);
	//
	// rpc Cultures(GetCulturesRequest) returns (GetCulturesResponse);
	// rpc SetCulture(SetCultureRequest) returns (SetCultureResponse);
	Factions(context.Context, *GetFactionsRequest) (*GetFactionsResponse, error)
	SetFactions(context.Context, *SetFactionsRequest) (*SetFactionsResponse, error)
	ListFactions(context.Context, *ListFactionsRequest) (*ListFactionsResponse, error)
	DeleteFaction(context.Context, *DeleteFactionRequest) (*DeleteFactionResponse, error)
	OnChange(*OnChangeRequest, grpc.ServerStreamingServer[OnChangeResponse]) error
	AckStream(grpc.ClientStreamingServer[AckRequest, AckResponse]) error
	DeferChange(context.Context, *DeferChangeRequest) (*DeferChangeResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServer struct{}

func (UnimplementedAPIServer) Worlds(context.Context, *GetWorldsRequest) (*GetWorldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Worlds not implemented")
}
func (UnimplementedAPIServer) SetWorld(context.Context, *SetWorldRequest) (*SetWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorld not implemented")
}
func (UnimplementedAPIServer) ListWorlds(context.Context, *ListWorldsRequest) (*ListWorldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorlds not implemented")
}
func (UnimplementedAPIServer) DeleteWorld(context.Context, *DeleteWorldRequest) (*DeleteWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorld not implemented")
}
func (UnimplementedAPIServer) Actors(context.Context, *GetActorsRequest) (*GetActorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actors not implemented")
}
func (UnimplementedAPIServer) SetActors(context.Context, *SetActorsRequest) (*SetActorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActors not implemented")
}
func (UnimplementedAPIServer) ListActors(context.Context, *ListActorsRequest) (*ListActorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActors not implemented")
}
func (UnimplementedAPIServer) DeleteActor(context.Context, *DeleteActorRequest) (*DeleteActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActor not implemented")
}
func (UnimplementedAPIServer) Factions(context.Context, *GetFactionsRequest) (*GetFactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Factions not implemented")
}
func (UnimplementedAPIServer) SetFactions(context.Context, *SetFactionsRequest) (*SetFactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFactions not implemented")
}
func (UnimplementedAPIServer) ListFactions(context.Context, *ListFactionsRequest) (*ListFactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFactions not implemented")
}
func (UnimplementedAPIServer) DeleteFaction(context.Context, *DeleteFactionRequest) (*DeleteFactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFaction not implemented")
}
func (UnimplementedAPIServer) OnChange(*OnChangeRequest, grpc.ServerStreamingServer[OnChangeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method OnChange not implemented")
}
func (UnimplementedAPIServer) AckStream(grpc.ClientStreamingServer[AckRequest, AckResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AckStream not implemented")
}
func (UnimplementedAPIServer) DeferChange(context.Context, *DeferChangeRequest) (*DeferChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeferChange not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}
func (UnimplementedAPIServer) testEmbeddedByValue()             {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	// If the following call pancis, it indicates UnimplementedAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_Worlds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Worlds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Worlds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Worlds(ctx, req.(*GetWorldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_SetWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetWorld(ctx, req.(*SetWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListWorlds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListWorlds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListWorlds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListWorlds(ctx, req.(*ListWorldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteWorld(ctx, req.(*DeleteWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Actors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Actors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Actors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Actors(ctx, req.(*GetActorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetActors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetActors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_SetActors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetActors(ctx, req.(*SetActorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListActors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListActors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListActors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListActors(ctx, req.(*ListActorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteActor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteActor(ctx, req.(*DeleteActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Factions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Factions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Factions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Factions(ctx, req.(*GetFactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetFactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetFactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_SetFactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetFactions(ctx, req.(*SetFactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListFactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListFactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListFactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListFactions(ctx, req.(*ListFactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteFaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteFaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteFaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteFaction(ctx, req.(*DeleteFactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_OnChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnChangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).OnChange(m, &grpc.GenericServerStream[OnChangeRequest, OnChangeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_OnChangeServer = grpc.ServerStreamingServer[OnChangeResponse]

func _API_AckStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).AckStream(&grpc.GenericServerStream[AckRequest, AckResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_AckStreamServer = grpc.ClientStreamingServer[AckRequest, AckResponse]

func _API_DeferChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeferChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeferChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeferChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeferChange(ctx, req.(*DeferChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Worlds",
			Handler:    _API_Worlds_Handler,
		},
		{
			MethodName: "SetWorld",
			Handler:    _API_SetWorld_Handler,
		},
		{
			MethodName: "ListWorlds",
			Handler:    _API_ListWorlds_Handler,
		},
		{
			MethodName: "DeleteWorld",
			Handler:    _API_DeleteWorld_Handler,
		},
		{
			MethodName: "Actors",
			Handler:    _API_Actors_Handler,
		},
		{
			MethodName: "SetActors",
			Handler:    _API_SetActors_Handler,
		},
		{
			MethodName: "ListActors",
			Handler:    _API_ListActors_Handler,
		},
		{
			MethodName: "DeleteActor",
			Handler:    _API_DeleteActor_Handler,
		},
		{
			MethodName: "Factions",
			Handler:    _API_Factions_Handler,
		},
		{
			MethodName: "SetFactions",
			Handler:    _API_SetFactions_Handler,
		},
		{
			MethodName: "ListFactions",
			Handler:    _API_ListFactions_Handler,
		},
		{
			MethodName: "DeleteFaction",
			Handler:    _API_DeleteFaction_Handler,
		},
		{
			MethodName: "DeferChange",
			Handler:    _API_DeferChange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnChange",
			Handler:       _API_OnChange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AckStream",
			Handler:       _API_AckStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
