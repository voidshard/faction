// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: job.proto

package structs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// JobState is the state of a job
// - pending on first creation, awaiting people to signup
// - active when enough people have signed up
// - done when the action has been attempted
// - failed when the action could not be attempted / was cancelled
type JobState int32

const (
	JobState_Pending JobState = 0 // waiting to start
	JobState_Ready   JobState = 1 // ready to start
	JobState_Active  JobState = 2 // in progress
	JobState_Done    JobState = 3 // completed successfully
	JobState_Failed  JobState = 4 // failed or failed to start
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "Pending",
		1: "Ready",
		2: "Active",
		3: "Done",
		4: "Failed",
	}
	JobState_value = map[string]int32{
		"Pending": 0,
		"Ready":   1,
		"Active":  2,
		"Done":    3,
		"Failed":  4,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_job_proto_enumTypes[0].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_job_proto_enumTypes[0]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{0}
}

// Job is what a faction creates when it wishes to perform an Action.
//
// People sympathetic to the faction who don't already have work sign on to 'work'
// jobs. If enough people signon by the time the job is registered to start then
// it goes ahead (ie. the action is attempted).
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ParentJobID     string `protobuf:"bytes,2,opt,name=ParentJobID,proto3" json:"ParentJobID,omitempty"`         // if this job is a sub-job, this is the parent job ID
	SourceFactionID string `protobuf:"bytes,3,opt,name=SourceFactionID,proto3" json:"SourceFactionID,omitempty"` // ID of the faction posting the job
	SourceAreaID    string `protobuf:"bytes,4,opt,name=SourceAreaID,proto3" json:"SourceAreaID,omitempty"`       // where people will be recruited from
	Action          string `protobuf:"bytes,5,opt,name=Action,proto3" json:"Action,omitempty"`                   // action that is due to take place
	Priority        int64  `protobuf:"varint,6,opt,name=Priority,proto3" json:"Priority,omitempty"`              // priority of this job
	Conscription    bool   `protobuf:"varint,7,opt,name=Conscription,proto3" json:"Conscription,omitempty"`      // if job is allowed to force people take part
	TargetFactionID string `protobuf:"bytes,8,opt,name=TargetFactionID,proto3" json:"TargetFactionID,omitempty"` // ID of the faction the action is aimed at
	TargetAreaID    string `protobuf:"bytes,9,opt,name=TargetAreaID,proto3" json:"TargetAreaID,omitempty"`       // where the action will take place
	// key/val pair to hold adv. target metadata (ie. key:PERSON val:PERSON_ID)
	// We only set this if TargetFactionID and TargetAreaID (always set) are not enough
	// ie. we target a specfic person, or a specific building etc within some area & faction
	TargetMetaKey Meta     `protobuf:"varint,10,opt,name=TargetMetaKey,proto3,enum=Meta" json:"TargetMetaKey,omitempty"`
	TargetMetaVal string   `protobuf:"bytes,11,opt,name=TargetMetaVal,proto3" json:"TargetMetaVal,omitempty"`
	PeopleMin     int64    `protobuf:"varint,12,opt,name=PeopleMin,proto3" json:"PeopleMin,omitempty"`       // required min number of people (else job fails to kick off)
	PeopleMax     int64    `protobuf:"varint,13,opt,name=PeopleMax,proto3" json:"PeopleMax,omitempty"`       // max number of people that can work this (if any)
	PeopleNow     int64    `protobuf:"varint,14,opt,name=PeopleNow,proto3" json:"PeopleNow,omitempty"`       // people signed up to work this
	TickCreated   int64    `protobuf:"varint,15,opt,name=TickCreated,proto3" json:"TickCreated,omitempty"`   // when the job was created
	TickStarts    int64    `protobuf:"varint,16,opt,name=TickStarts,proto3" json:"TickStarts,omitempty"`     // when the job is due to start
	TickEnds      int64    `protobuf:"varint,17,opt,name=TickEnds,proto3" json:"TickEnds,omitempty"`         // when the job will end
	Secrecy       int64    `protobuf:"varint,18,opt,name=Secrecy,proto3" json:"Secrecy,omitempty"`           // the result of an espionage defence roll (if covert)
	IsIllegal     bool     `protobuf:"varint,19,opt,name=IsIllegal,proto3" json:"IsIllegal,omitempty"`       // action has been outlawed
	State         JobState `protobuf:"varint,20,opt,name=State,proto3,enum=JobState" json:"State,omitempty"` // current state of the job
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Job) GetParentJobID() string {
	if x != nil {
		return x.ParentJobID
	}
	return ""
}

func (x *Job) GetSourceFactionID() string {
	if x != nil {
		return x.SourceFactionID
	}
	return ""
}

func (x *Job) GetSourceAreaID() string {
	if x != nil {
		return x.SourceAreaID
	}
	return ""
}

func (x *Job) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Job) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Job) GetConscription() bool {
	if x != nil {
		return x.Conscription
	}
	return false
}

func (x *Job) GetTargetFactionID() string {
	if x != nil {
		return x.TargetFactionID
	}
	return ""
}

func (x *Job) GetTargetAreaID() string {
	if x != nil {
		return x.TargetAreaID
	}
	return ""
}

func (x *Job) GetTargetMetaKey() Meta {
	if x != nil {
		return x.TargetMetaKey
	}
	return Meta_None
}

func (x *Job) GetTargetMetaVal() string {
	if x != nil {
		return x.TargetMetaVal
	}
	return ""
}

func (x *Job) GetPeopleMin() int64 {
	if x != nil {
		return x.PeopleMin
	}
	return 0
}

func (x *Job) GetPeopleMax() int64 {
	if x != nil {
		return x.PeopleMax
	}
	return 0
}

func (x *Job) GetPeopleNow() int64 {
	if x != nil {
		return x.PeopleNow
	}
	return 0
}

func (x *Job) GetTickCreated() int64 {
	if x != nil {
		return x.TickCreated
	}
	return 0
}

func (x *Job) GetTickStarts() int64 {
	if x != nil {
		return x.TickStarts
	}
	return 0
}

func (x *Job) GetTickEnds() int64 {
	if x != nil {
		return x.TickEnds
	}
	return 0
}

func (x *Job) GetSecrecy() int64 {
	if x != nil {
		return x.Secrecy
	}
	return 0
}

func (x *Job) GetIsIllegal() bool {
	if x != nil {
		return x.IsIllegal
	}
	return false
}

func (x *Job) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_Pending
}

var File_job_proto protoreflect.FileDescriptor

var file_job_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x05, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x56, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65,
	0x4d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x4d, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x4e, 0x6f,
	0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x4e,
	0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x69, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x69, 0x63, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49,
	0x73, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x44, 0x0a, 0x08, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e,
	0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x42,
	0x0d, 0x5a, 0x0b, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_job_proto_rawDescOnce sync.Once
	file_job_proto_rawDescData = file_job_proto_rawDesc
)

func file_job_proto_rawDescGZIP() []byte {
	file_job_proto_rawDescOnce.Do(func() {
		file_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_job_proto_rawDescData)
	})
	return file_job_proto_rawDescData
}

var file_job_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_job_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_job_proto_goTypes = []interface{}{
	(JobState)(0), // 0: JobState
	(*Job)(nil),   // 1: Job
	(Meta)(0),     // 2: Meta
}
var file_job_proto_depIdxs = []int32{
	2, // 0: Job.TargetMetaKey:type_name -> Meta
	0, // 1: Job.State:type_name -> JobState
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_job_proto_init() }
func file_job_proto_init() {
	if File_job_proto != nil {
		return
	}
	file_meta_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_job_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_job_proto_goTypes,
		DependencyIndexes: file_job_proto_depIdxs,
		EnumInfos:         file_job_proto_enumTypes,
		MessageInfos:      file_job_proto_msgTypes,
	}.Build()
	File_job_proto = out.File
	file_job_proto_rawDesc = nil
	file_job_proto_goTypes = nil
	file_job_proto_depIdxs = nil
}
