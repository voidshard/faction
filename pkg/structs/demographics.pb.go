// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: demographics.proto

package structs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Demographics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Faith       map[string]*DemographicStatSpread `protobuf:"bytes,1,rep,name=Faith,proto3" json:"Faith,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Profession  map[string]*DemographicStatSpread `protobuf:"bytes,2,rep,name=Profession,proto3" json:"Profession,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Affiliation map[string]*DemographicStatSpread `protobuf:"bytes,3,rep,name=Affiliation,proto3" json:"Affiliation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rank        map[string]*DemographicRankSpread `protobuf:"bytes,4,rep,name=Rank,proto3" json:"Rank,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Demographics) Reset() {
	*x = Demographics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_demographics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Demographics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Demographics) ProtoMessage() {}

func (x *Demographics) ProtoReflect() protoreflect.Message {
	mi := &file_demographics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Demographics.ProtoReflect.Descriptor instead.
func (*Demographics) Descriptor() ([]byte, []int) {
	return file_demographics_proto_rawDescGZIP(), []int{0}
}

func (x *Demographics) GetFaith() map[string]*DemographicStatSpread {
	if x != nil {
		return x.Faith
	}
	return nil
}

func (x *Demographics) GetProfession() map[string]*DemographicStatSpread {
	if x != nil {
		return x.Profession
	}
	return nil
}

func (x *Demographics) GetAffiliation() map[string]*DemographicStatSpread {
	if x != nil {
		return x.Affiliation
	}
	return nil
}

func (x *Demographics) GetRank() map[string]*DemographicRankSpread {
	if x != nil {
		return x.Rank
	}
	return nil
}

type DemographicStatSpread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exemplary int64 `protobuf:"varint,1,opt,name=Exemplary,proto3" json:"Exemplary,omitempty"`
	Excellent int64 `protobuf:"varint,2,opt,name=Excellent,proto3" json:"Excellent,omitempty"`
	Good      int64 `protobuf:"varint,3,opt,name=Good,proto3" json:"Good,omitempty"`
	Fine      int64 `protobuf:"varint,4,opt,name=Fine,proto3" json:"Fine,omitempty"`
	Average   int64 `protobuf:"varint,5,opt,name=Average,proto3" json:"Average,omitempty"`
	Poor      int64 `protobuf:"varint,6,opt,name=Poor,proto3" json:"Poor,omitempty"`
	Awful     int64 `protobuf:"varint,7,opt,name=Awful,proto3" json:"Awful,omitempty"`
	Terrible  int64 `protobuf:"varint,8,opt,name=Terrible,proto3" json:"Terrible,omitempty"`
	Abysmal   int64 `protobuf:"varint,9,opt,name=Abysmal,proto3" json:"Abysmal,omitempty"`
	Total     int64 `protobuf:"varint,10,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *DemographicStatSpread) Reset() {
	*x = DemographicStatSpread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_demographics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemographicStatSpread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemographicStatSpread) ProtoMessage() {}

func (x *DemographicStatSpread) ProtoReflect() protoreflect.Message {
	mi := &file_demographics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemographicStatSpread.ProtoReflect.Descriptor instead.
func (*DemographicStatSpread) Descriptor() ([]byte, []int) {
	return file_demographics_proto_rawDescGZIP(), []int{1}
}

func (x *DemographicStatSpread) GetExemplary() int64 {
	if x != nil {
		return x.Exemplary
	}
	return 0
}

func (x *DemographicStatSpread) GetExcellent() int64 {
	if x != nil {
		return x.Excellent
	}
	return 0
}

func (x *DemographicStatSpread) GetGood() int64 {
	if x != nil {
		return x.Good
	}
	return 0
}

func (x *DemographicStatSpread) GetFine() int64 {
	if x != nil {
		return x.Fine
	}
	return 0
}

func (x *DemographicStatSpread) GetAverage() int64 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *DemographicStatSpread) GetPoor() int64 {
	if x != nil {
		return x.Poor
	}
	return 0
}

func (x *DemographicStatSpread) GetAwful() int64 {
	if x != nil {
		return x.Awful
	}
	return 0
}

func (x *DemographicStatSpread) GetTerrible() int64 {
	if x != nil {
		return x.Terrible
	}
	return 0
}

func (x *DemographicStatSpread) GetAbysmal() int64 {
	if x != nil {
		return x.Abysmal
	}
	return 0
}

func (x *DemographicStatSpread) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DemographicRankSpread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ruler       int64 `protobuf:"varint,1,opt,name=Ruler,proto3" json:"Ruler,omitempty"`
	Elder       int64 `protobuf:"varint,2,opt,name=Elder,proto3" json:"Elder,omitempty"`
	GrandMaster int64 `protobuf:"varint,3,opt,name=GrandMaster,proto3" json:"GrandMaster,omitempty"`
	Master      int64 `protobuf:"varint,4,opt,name=Master,proto3" json:"Master,omitempty"`
	Expert      int64 `protobuf:"varint,5,opt,name=Expert,proto3" json:"Expert,omitempty"`
	Adept       int64 `protobuf:"varint,6,opt,name=Adept,proto3" json:"Adept,omitempty"`
	Journeyman  int64 `protobuf:"varint,7,opt,name=Journeyman,proto3" json:"Journeyman,omitempty"`
	Novice      int64 `protobuf:"varint,8,opt,name=Novice,proto3" json:"Novice,omitempty"`
	Apprentice  int64 `protobuf:"varint,9,opt,name=Apprentice,proto3" json:"Apprentice,omitempty"`
	Associate   int64 `protobuf:"varint,10,opt,name=Associate,proto3" json:"Associate,omitempty"`
	Total       int64 `protobuf:"varint,11,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *DemographicRankSpread) Reset() {
	*x = DemographicRankSpread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_demographics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemographicRankSpread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemographicRankSpread) ProtoMessage() {}

func (x *DemographicRankSpread) ProtoReflect() protoreflect.Message {
	mi := &file_demographics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemographicRankSpread.ProtoReflect.Descriptor instead.
func (*DemographicRankSpread) Descriptor() ([]byte, []int) {
	return file_demographics_proto_rawDescGZIP(), []int{2}
}

func (x *DemographicRankSpread) GetRuler() int64 {
	if x != nil {
		return x.Ruler
	}
	return 0
}

func (x *DemographicRankSpread) GetElder() int64 {
	if x != nil {
		return x.Elder
	}
	return 0
}

func (x *DemographicRankSpread) GetGrandMaster() int64 {
	if x != nil {
		return x.GrandMaster
	}
	return 0
}

func (x *DemographicRankSpread) GetMaster() int64 {
	if x != nil {
		return x.Master
	}
	return 0
}

func (x *DemographicRankSpread) GetExpert() int64 {
	if x != nil {
		return x.Expert
	}
	return 0
}

func (x *DemographicRankSpread) GetAdept() int64 {
	if x != nil {
		return x.Adept
	}
	return 0
}

func (x *DemographicRankSpread) GetJourneyman() int64 {
	if x != nil {
		return x.Journeyman
	}
	return 0
}

func (x *DemographicRankSpread) GetNovice() int64 {
	if x != nil {
		return x.Novice
	}
	return 0
}

func (x *DemographicRankSpread) GetApprentice() int64 {
	if x != nil {
		return x.Apprentice
	}
	return 0
}

func (x *DemographicRankSpread) GetAssociate() int64 {
	if x != nil {
		return x.Associate
	}
	return 0
}

func (x *DemographicRankSpread) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_demographics_proto protoreflect.FileDescriptor

var file_demographics_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x04, 0x0a, 0x0c, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x46, 0x61, 0x69, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x46, 0x61, 0x69, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x44, 0x65, 0x6d, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x44, 0x65, 0x6d, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x41, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x1a, 0x50, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x65, 0x6d, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x10,
	0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x52, 0x61, 0x6e, 0x6b, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x47,
	0x6f, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x47, 0x6f, 0x6f, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x46,
	0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x6f, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x77, 0x66, 0x75, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x41, 0x77, 0x66, 0x75, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x72, 0x72, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x65, 0x72, 0x72, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x62, 0x79, 0x73, 0x6d, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x62, 0x79, 0x73, 0x6d, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xb7, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x75,
	0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41,
	0x64, 0x65, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x41, 0x64, 0x65, 0x70,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x6d, 0x61,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x70, 0x70,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41,
	0x70, 0x70, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x0d, 0x5a,
	0x0b, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_demographics_proto_rawDescOnce sync.Once
	file_demographics_proto_rawDescData = file_demographics_proto_rawDesc
)

func file_demographics_proto_rawDescGZIP() []byte {
	file_demographics_proto_rawDescOnce.Do(func() {
		file_demographics_proto_rawDescData = protoimpl.X.CompressGZIP(file_demographics_proto_rawDescData)
	})
	return file_demographics_proto_rawDescData
}

var file_demographics_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_demographics_proto_goTypes = []interface{}{
	(*Demographics)(nil),          // 0: Demographics
	(*DemographicStatSpread)(nil), // 1: DemographicStatSpread
	(*DemographicRankSpread)(nil), // 2: DemographicRankSpread
	nil,                           // 3: Demographics.FaithEntry
	nil,                           // 4: Demographics.ProfessionEntry
	nil,                           // 5: Demographics.AffiliationEntry
	nil,                           // 6: Demographics.RankEntry
}
var file_demographics_proto_depIdxs = []int32{
	3, // 0: Demographics.Faith:type_name -> Demographics.FaithEntry
	4, // 1: Demographics.Profession:type_name -> Demographics.ProfessionEntry
	5, // 2: Demographics.Affiliation:type_name -> Demographics.AffiliationEntry
	6, // 3: Demographics.Rank:type_name -> Demographics.RankEntry
	1, // 4: Demographics.FaithEntry.value:type_name -> DemographicStatSpread
	1, // 5: Demographics.ProfessionEntry.value:type_name -> DemographicStatSpread
	1, // 6: Demographics.AffiliationEntry.value:type_name -> DemographicStatSpread
	2, // 7: Demographics.RankEntry.value:type_name -> DemographicRankSpread
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_demographics_proto_init() }
func file_demographics_proto_init() {
	if File_demographics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_demographics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Demographics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_demographics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemographicStatSpread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_demographics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemographicRankSpread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_demographics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_demographics_proto_goTypes,
		DependencyIndexes: file_demographics_proto_depIdxs,
		MessageInfos:      file_demographics_proto_msgTypes,
	}.Build()
	File_demographics_proto = out.File
	file_demographics_proto_rawDesc = nil
	file_demographics_proto_goTypes = nil
	file_demographics_proto_depIdxs = nil
}
